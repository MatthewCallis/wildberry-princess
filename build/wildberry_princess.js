// Generated by CoffeeScript 1.9.3
(function() {
  var WildberryPrincess,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WildberryPrincess = (function() {
    function WildberryPrincess() {
      this.clickHandler = bind(this.clickHandler, this);
    }

    WildberryPrincess.prototype.getLabel = function(element) {
      return element.getAttribute('data-event-label');
    };

    WildberryPrincess.prototype.trackUserActions = function(selector, category, action, label, value) {
      var elements, i, params, results;
      params = {
        category: category,
        action: action || 'Click'
      };
      if (label) {
        params.label = label;
      }
      if (value) {
        params.value = value;
      }
      elements = document.querySelectorAll(selector);
      i = 0;
      results = [];
      while (i < elements.length) {
        elements[i].data = {
          eventParams: params
        };
        elements[i].removeEventListener('click', this.clickHandler);
        elements[i].addEventListener('click', this.clickHandler, false);
        results.push(i++);
      }
      return results;
    };

    WildberryPrincess.prototype.clickHandler = function(event) {
      var element, eventParams, label, payload, ref;
      if (!event) {
        return;
      }
      element = event.target;
      eventParams = (ref = element.data) != null ? ref.eventParams : void 0;
      if (!eventParams) {
        return;
      }
      if (!(label = eventParams.label)) {
        label = this.getLabel(element);
      }
      payload = {
        hitType: 'event',
        eventCategory: eventParams.category,
        eventAction: eventParams.action
      };
      if (label) {
        payload.eventLabel = label;
      }
      if (eventParams.value) {
        payload.eventValue = eventParams.value;
      }
      this.sendPayload(payload);
    };

    WildberryPrincess.prototype.trackEvent = function(category, action, label, value) {
      var payload;
      payload = {
        hitType: 'event',
        eventCategory: category,
        eventAction: action
      };
      if (label) {
        payload.eventLabel = label;
      }
      if (value) {
        payload.eventValue = value;
      }
      return this.sendPayload(payload);
    };

    WildberryPrincess.prototype.trackPageView = function(page, title) {
      var payload;
      page || (page = window.location.pathname);
      title || (title = document.title);
      payload = {
        hitType: 'pageview',
        page: page,
        title: title
      };
      return this.sendPayload(payload);
    };

    WildberryPrincess.prototype.trackEcommerce = function(action, payload) {
      if (window.ga != null) {
        return window.ga("ecommerce:" + action, payload);
      }
    };

    WildberryPrincess.prototype.set = function(key, value) {
      if (window.ga != null) {
        return window.ga('set', key, value);
      }
    };

    WildberryPrincess.prototype.sendPayload = function(payload) {
      if (window.ga != null) {
        return window.ga('send', payload);
      }
    };

    return WildberryPrincess;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).WildberryPrincess = WildberryPrincess;

}).call(this);
