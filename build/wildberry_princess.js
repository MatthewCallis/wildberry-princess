// Generated by CoffeeScript 1.9.3
(function() {
  var WildberryPrincess,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WildberryPrincess = (function() {
    var defaults;

    defaults = {
      useGoogleAnalytics: true,
      useKissMetrics: true
    };

    function WildberryPrincess(options) {
      if (options == null) {
        options = {};
      }
      this.clearIdentity = bind(this.clearIdentity, this);
      this.identify = bind(this.identify, this);
      this.setKM = bind(this.setKM, this);
      this.set = bind(this.set, this);
      this.trackEcommerce = bind(this.trackEcommerce, this);
      this.trackPageView = bind(this.trackPageView, this);
      this.trackEventKM = bind(this.trackEventKM, this);
      this.trackEventGA = bind(this.trackEventGA, this);
      this.trackEvent = bind(this.trackEvent, this);
      this.clickHandler = bind(this.clickHandler, this);
      this.trackUserActions = bind(this.trackUserActions, this);
      this.settings = this.merge(defaults, options);
    }

    WildberryPrincess.prototype.getLabel = function(element) {
      return element.getAttribute('data-event-label');
    };

    WildberryPrincess.prototype.trackUserActions = function(selector, category, action, label, value) {
      var elements, i, params, results;
      params = {
        category: category,
        action: action || 'Click'
      };
      if (label) {
        params.label = label;
      }
      if (value) {
        params.value = value;
      }
      elements = document.querySelectorAll(selector);
      i = 0;
      results = [];
      while (i < elements.length) {
        elements[i].data = {
          eventParams: params
        };
        elements[i].removeEventListener('click', this.clickHandler);
        elements[i].addEventListener('click', this.clickHandler, false);
        results.push(i++);
      }
      return results;
    };

    WildberryPrincess.prototype.clickHandler = function(event) {
      var element, eventParams, label, payload, ref;
      if (!event) {
        return;
      }
      element = event.target;
      eventParams = (ref = element.data) != null ? ref.eventParams : void 0;
      if (!eventParams) {
        return;
      }
      if (!(label = eventParams.label)) {
        label = this.getLabel(element);
      }
      if (this.settings.useGoogleAnalytics) {
        payload = {
          hitType: 'event',
          eventCategory: eventParams.category,
          eventAction: eventParams.action
        };
        if (label) {
          payload.eventLabel = label;
        }
        if (eventParams.value) {
          payload.eventValue = eventParams.value;
        }
        this.sendPayloadGA(payload);
      }
      if (this.settings.useKissMetrics) {
        label = eventParams.category + " " + label + " " + eventParams.action;
        payload = {
          category: eventParams.category,
          action: eventParams.action
        };
        if (label) {
          payload.label = label;
        }
        if (eventParams.value) {
          payload.value = eventParams.value;
        }
        this.trackEventKM(label, payload);
      }
    };

    WildberryPrincess.prototype.trackEvent = function(category, action, label, value) {
      var payload;
      if (this.settings.useGoogleAnalytics) {
        this.trackEventGA(category, action, label, value);
      }
      if (this.settings.useKissMetrics) {
        label = category + " " + label + " " + action;
        payload = {
          category: category,
          action: action
        };
        if (label) {
          payload.label = label;
        }
        if (value) {
          payload.value = value;
        }
        return this.trackEventKM(label, payload);
      }
    };

    WildberryPrincess.prototype.trackEventGA = function(category, action, label, value) {
      var payload;
      payload = {
        hitType: 'event',
        eventCategory: category,
        eventAction: action
      };
      if (label) {
        payload.eventLabel = label;
      }
      if (value) {
        payload.eventValue = value;
      }
      return this.sendPayloadGA(payload);
    };

    WildberryPrincess.prototype.trackEventKM = function(label, payload) {
      return this.sendPayloadKM('record', label, payload);
    };

    WildberryPrincess.prototype.trackPageView = function(page, title) {
      var payload;
      page || (page = window.location.pathname);
      title || (title = document.title);
      payload = {
        hitType: 'pageview',
        page: page,
        title: title
      };
      return this.sendPayloadGA(payload);
    };

    WildberryPrincess.prototype.trackEcommerce = function(action, payload) {
      if ((window.ga != null) && this.settings.useGoogleAnalytics) {
        return window.ga("ecommerce:" + action, payload);
      }
    };

    WildberryPrincess.prototype.set = function(key, value) {
      if (this.settings.useGoogleAnalytics) {
        this.setGA(key, value);
      }
      if (this.settings.useKissMetrics) {
        return this.setKM(key, value);
      }
    };

    WildberryPrincess.prototype.setGA = function(key, value) {
      if (window.ga != null) {
        return window.ga('set', key, value);
      }
    };

    WildberryPrincess.prototype.setKM = function(key, value) {
      var data;
      data = {};
      data[key] = value;
      return this.sendPayloadKM('set', data, null);
    };

    WildberryPrincess.prototype.identify = function(user_id) {
      if (user_id == null) {
        user_id = 'anonymous';
      }
      if (this.settings.useGoogleAnalytics && user_id !== 'anonymous') {
        this.setGA('userId', user_id);
      }
      if (this.settings.useKissMetrics) {
        return this.sendPayloadKM('identify', user_id);
      }
    };

    WildberryPrincess.prototype.clearIdentity = function() {
      if (this.settings.useKissMetrics) {
        return this.sendPayloadKM('clearIdentity');
      }
    };

    WildberryPrincess.prototype.sendPayloadGA = function(payload) {
      if (window.ga != null) {
        return window.ga('send', payload);
      }
    };

    WildberryPrincess.prototype.sendPayloadKM = function(action, payload, data) {
      var output;
      if (window._kmq != null) {
        output = [action];
        if (payload) {
          output.push(payload);
        }
        if (data) {
          output.push(data);
        }
        return window._kmq.push(output);
      }
    };

    WildberryPrincess.prototype.merge = function(input, options) {
      var k, output, v;
      output = JSON.parse(JSON.stringify(input));
      for (k in options) {
        v = options[k];
        output[k] = v;
      }
      return output;
    };

    return WildberryPrincess;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).WildberryPrincess = WildberryPrincess;

}).call(this);
